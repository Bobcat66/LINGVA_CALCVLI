A list of standard MACHINA_SIMVLATA functions

print 
Takes one argument as a parameter, a reference to a string
LOAD 00
ARRLEN
NEWVAR
PUSH 00
NEWVAR
LOAD 01
LOAD 02
IFCEQ 00 0F
LOAD 00
LOAD 02
LARR
CPRINT
INC 02 01
GOTO FF F0
PUSH 20
CPRINT
PUSH 00
RETURN
hexcode
08 00 0C 00 1F 22 00 00 22 0C 01 0C 02 12 00 0F 
0C 00 0C 02 1D 18 0B 02 01 0A FF F0 00 00 21

printl
Takes one argument as a parameter, a reference to a string. Each string printed ends with a newline
LOAD 00
ARRLEN
NEWVAR
PUSH 00
NEWVAR
LOAD 01
LOAD 02
IFCEQ 00 0F
LOAD 00
LOAD 02
LARR
CPRINT
INC 02 01
GOTO FF F0
PUSH 20
CPRINT
PUSH 0A
CPRINT
PUSH 00
RETURN
08 00 0C 00 1F 22 00 00 22 0C 01 0C 02 12 00 0F
0C 00 0C 02 1D 18 0B 02 01 0A FF F0 00 0A 18 00
00 21

promptl
takes two arguments: a reference to a prompt string and a reference to an output string
Does not strip newline at the end
PUSH
00
NEWVAR
PUSH
00
NEWVAR
PUSH
00
NEWVAR
RILOAD 00
ARRLEN
RISTORE 02
RILOAD 02
RILOAD 03
IFCEQ 00 0F
RILOAD 00
RILOAD 03
ILARR
CPRINT
INC 03 01
GOTO FF F0
INPUT
DUP
RILOAD 01
RSARR
DUP
IFEQ 00 12
PUSH 01
SUB
SWAP
DUP2
POP
RILOAD 01
MSWAP 03
SWAP
ISTARR
GOTO FF F0
RILOAD 01
RETURN
hexcode:
08 00 00 00 22 00 00 22 00 00 22 0C 00 1F 11 02
0C 02 0C 03 12 00 0F 0C 00 0C 03 1D 18 0B 03 01
0A FF F0 2B 19 0C 01 2C 19 0D 00 12 00 01 03 2D
1A 01 0C 01 2E 03 2D 1E 0A FF F0 0C 01 21



prompt
takes two arguments: a reference to a prompt string and a reference to an output string
Strips newline at the end
PUSH 00
NEWVAR
PUSH 00
NEWVAR
PUSH 00
NEWVAR
RILOAD 00
ARRLEN
RISTORE 02
RILOAD 02
RILOAD 03
IFCEQ 00 0F
RILOAD 00
RILOAD 03
ILARR
CPRINT
INC 03 01
GOTO FF F0
INPUT
SWAP
POP
PUSH 01
SUB
DUP
RILOAD 01
RSARR
DUP
IFEQ 00 12
PUSH 01
SUB
SWAP
DUP2
POP
RILOAD 01
MSWAP 03
SWAP
ISTARR
GOTO FF F0
RILOAD 01
RETURN
hexcode:
08 00 00 00 22 00 00 22 00 00 22 0C 00 1F 11 02
0C 02 0C 03 12 00 0F 0C 00 0C 03 1D 18 0B 03 01
0A FF F0 2B 2D 01 00 01 03 19 0C 01 2C 19 0D 00
12 00 01 03 2D 1A 01 0C 01 2E 03 2D 1E 0A FF F0
0C 01 21

promptn
new prompt, creates string
takes one argument: a reference to a prompt string
Strips newline at the end
NEWOBJ 08 00 03 01
NEWVAR //Var 01
PUSH
00
NEWVAR
PUSH
00
NEWVAR
PUSH
00
NEWVAR
RILOAD 00
ARRLEN
RISTORE 02
RILOAD 02
RILOAD 03
IFCEQ 00 0F
RILOAD 00
RILOAD 03
ILARR
CPRINT
INC 03 01
GOTO FF F0
INPUT
SWAP
POP
PUSH 01
SUB
DUP
RILOAD 01
RSARR
DUP
IFEQ 00 12
PUSH 01
SUB
SWAP
DUP2
POP
RILOAD 01
MSWAP 03
SWAP
ISTARR
GOTO FF F0
RILOAD 01
RETURN
08 00 35 08 00 03 01 22 00 00 22 00 00 22 00 00 
22 0C 00 1F 11 02 0C 02 0C 03 12 00 0F 0C 00 0C 
03 1D 18 0B 03 01 0A FF F0 2B 2D 01 00 01 03 19 
0C 01 2C 19 0D 00 12 00 01 03 2D 1A 01 0C 01 2E 
03 2D 1E 0A FF F0 0C 01 21

toRomnum-------------------------------------------------------------------------------------
//Var0 is the number to be converted to romnum
//Var1 is the reference to the string
RILOAD 00
ITOSTR
DUP
RILOAD 01
RSARR
PUSH 01
SUB

DUP //Beginning of if loop. Stack before: (elems) counter | stack after: (elems) counter counter
IFEQ 00 12
SWAP
DUP2
POP //Stack: (elems) counter counter elem
SWAP
RILOAD 01
MSWAP 03
ISTARR
PUSH 01
SUB
GOTO FF F0

RILOAD 01
MSWAP 03
ISTARR
RILOAD 01
RETURN
0C 00 3C 19 0C 01 2C 00 01 03 19 0D 00 12 2D 1A
01 2D 0C 01 2E 03 1E 00 01 03 0A FF F0 0C 01 2E
03 1E 0C 01 21

toRomnumOld----------------------------------------------------------------------------------
takes one variable, the integer to be converted to roman numerals
NEWOBJ 08 00 03 01
NEWVAR //Reference string. 2nd var (01)
RILOAD 00
IFEQ 00 06
GOTO 00 2E
PUSH 05 // returns 'NVLLA'
RILOAD 01 // Reference string
RSARR
PUSH 01
PUSH 00
PUSH 4E // N
ISTARR
PUSH 01
PUSH 01
PUSH 56 // V
ISTARR
PUSH 01
PUSH 02
PUSH 4C // L
ISTARR
PUSH 01
PUSH 03
PUSH 4C // L
ISTARR
PUSH 01
PUSH 04
PUSH 41 // A
ISTARR
RILOAD 01 // Reference string
RETURN

PUSH 1B //1B is a special character signifying the beginning of the string TODO
RILOAD 00

IFEQ 01 2B // Begin while loop 0 
RILOAD 00
WIDE PUSH 27 10
MOD
DUP // Stack: temp temp
WIDE PUSH 0F 9F // 3999

IFCLE 00 0B // Begin if conditional 0. Stack: ... temp
WIDE PUSH 03 E8
MOD // Stack ... temp % 1000
GOTO 00 0A // Else
DUP
RILOAD 00
SWAP
SUB // Stack ... temp (Var 00 - (n % 10000))
RISTORE 00 // End if conditional 0

RILOAD 00
WIDE PUSH 03 E8 // 1000
IDIV
RISTORE 00 // Stack: ... temp

DUP // Stack: ... 0x1B temp temp
WIDE PUSH 03 E8
IDIV
DUP // Stack: ... 0x1B temp (temp // 1000) (temp // 1000)

IFEQ 00 0E // Begin while loop 1 Stack: ... 0x1B temp (temp // 1000)
PUSH 4D // Stack: 1 ... 0x1B temp (temp // 1000) 0x4D
MSWAP 03 // Stack: 1 ... 0x1B 0x4D (temp // 1000) temp
SWAP // Stack: 1 ... 0x1B 0x4D temp (temp // 1000)
PUSH 01 // Stack: 1 ... 0x1B 0x4D temp (temp // 1000) 0x01
SUB // Stack: 1 ... 0x1B 0x4D temp ((temp // 1000)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... (M...M) temp
WIDE PUSH 03 E8 // 1000
MOD // Stack: ... (M...M) (temp % 1000)
DUP // Stack: ... (M...M) temp temp

WIDE PUSH 03 84 // 900 Stack: ... temp temp 900
IFCGE 00 06 // Stack: ... temp
GOTO 00 0E
PUSH 43
SWAP
PUSH 4D
SWAP
WIDE PUSH 03 84
SUB // Stack: ... 0x43 0x4D temp-900
DUP // Stack: ... temp temp

WIDE PUSH 01 F4 // 500
IFCGE 00 06
GOTO 00 0B
PUSH 44
SWAP
WIDE PUSH 01 F4
SUB
DUP // Stack: ... temp temp

WIDE PUSH 01 90 // 400
IFCGE 00 06
GOTO 00 0E
PUSH 43 // Stack: ... temp 0x43
SWAP
PUSH 44
SWAP
WIDE PUSH 01 90
SUB // Stack: ... 0x43 0x44 (temp-400)
DUP

PUSH 64 // 100
IDIV
DUP // Stack: ... temp (temp // 100) (temp // 100)
IFEQ 00 0E // Begin while loop 1 Stack: ... temp (temp // 100)
PUSH 43
MSWAP 03
SWAP // Stack: 1 ... 0x43 temp (temp // 100)
PUSH 01
SUB // Stack: 1 ... 0x43 temp ((temp // 100)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... temp
PUSH 64 // 100
MOD
DUP // Stack: ... temp temp

PUSH 5A // 90 
IFCGE 00 06
GOTO 00 0C
PUSH 58 // Stack: ... temp 0x58
SWAP
PUSH 43 // D
SWAP
PUSH 5A
SUB
DUP

PUSH 32 // 50
IFCGE 00 06
GOTO 00 09
PUSH 4C
SWAP
PUSH 32
SUB
DUP

PUSH 28 // 40
IFCGE 00 06
GOTO 00 0C
PUSH 58 // Stack: ... temp 0x58
SWAP
PUSH 4C // L
SWAP
PUSH 28
SUB
DUP

PUSH 0A // 10
IDIV
DUP
IFEQ 00 0E // Begin while loop 1 Stack: ... temp (temp // 10)
PUSH 58
MSWAP 03 // Stack: 1 ... 58 (temp // 10) temp
SWAP
PUSH 01
SUB // Stack: 1 ... 58 temp ((temp // 10)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... temp
PUSH 0A // 10
MOD
DUP // Stack: ... temp temp

PUSH 09 // 9
IFCGE 00 06
GOTO 00 0C
PUSH 49 // Stack: ... temp I
SWAP
PUSH 58 // X
SWAP
PUSH 09
SUB
DUP

PUSH 05
IFCGE 00 06
GOTO 00 09
PUSH 56 // V
SWAP
PUSH 05
SUB
DUP

PUSH 04 //
IFCGE 00 06
GOTO 00 0C
PUSH 49 // Stack: ... temp I
SWAP
PUSH 56 // V
SWAP
PUSH 04
SUB
DUP // Stack: ... temp temp

IFEQ 00 0C // Begin while loop 1 Stack: ... temp
PUSH 49 // Stack: 1 ... temp 0x49
SWAP
PUSH 01
SUB // Stack: 1 ... 0x49 temp-1
GOTO FF F6 // -12 End while loop 1

POP
PUSH 7C
GOTO FE D6

POP
PUSH 00
NEWVAR //Counter for space in string. 3rd var (02)
RILOAD 01 // output string Stack: ... (lastEle) ref
SWAP
RILOAD 02 
SWAP
ISTARR
INC 02 01

DUP // Stack: (eles) (lastEle) (lastEle)
PUSH 1B // Stack: (eles) (lastEle) (lastEle) 0x1B
IFCEQ 00 15 // Stack: (eles) (lastEle)
PUSH 01 
RILOAD 01
EXARR //Extends array
RILOAD 01 
SWAP 
RILOAD 02 
SWAP 
ISTARR // Adds elements
INC 02 01
GOTO FF EB
RILOAD 01
RETURN
hexcode:
08 00 35 08 00 03 01 22 0C 00 0D 00 06 0A 00 2E 
00 05 0C 01 2C 00 01 00 00 00 4E 1E 00 01 00 01 
00 56 1E 00 01 00 02 00 4C 1E 00 01 00 03 00 4C 
1E 00 01 00 04 00 41 1E 0C 01 21 00 1B 0C 00 0D 
01 2B 0C 00 32 00 27 10 36 19 32 00 0F 9F 17 00 
0B 32 00 03 E8 36 0A 00 0A 19 0C 00 2D 03 11 00 
0C 00 32 00 03 E8 37 11 00 19 32 00 03 E8 37 19 
0D 00 0E 00 4D 2E 03 2D 00 01 03 0A FF F4 01 32 
00 03 E8 36 19 32 00 03 84 16 00 06 0A 00 0E 00 
43 2D 00 4D 2D 32 00 03 84 03 19 32 00 01 F4 16 
00 06 0A 00 0B 00 44 2D 32 00 01 F4 03 19 32 00 
01 90 16 00 06 0A 00 0E 00 43 2D 00 44 2D 32 00 
01 90 03 19 00 64 37 19 0D 00 0E 00 43 2E 03 2D 
00 01 03 0A FF F4 01 00 64 36 19 00 5A 16 00 06 
0A 00 0C 00 58 2D 00 43 2D 00 5A 03 19 00 32 16 
00 06 0A 00 09 00 4C 2D 00 32 03 19 00 28 16 00 
06 0A 00 0C 00 58 2D 00 4C 2D 00 28 03 19 00 0A 
37 19 0D 00 0E 00 58 2E 03 2D 00 01 03 0A FF F4 
01 00 0A 36 19 00 09 16 00 06 0A 00 0C 00 49 2D 
00 58 2D 00 09 03 19 00 05 16 00 06 0A 00 09 00 
56 2D 00 05 03 19 00 04 16 00 06 0A 00 0C 00 49 
2D 00 56 2D 00 04 03 19 0D 00 0C 00 49 2D 00 01 
03 0A FF F6 01 00 7C 0A FE D6 01 00 00 22 0C 01 
2D 0C 02 2D 1E 0B 02 01 19 00 1B 12 00 15 00 01 
0C 01 34 0C 01 2D 0C 02 2D 1E 0B 02 01 0A FF EB 
0C 01 21

toRomNum2 --------------------------------------------------------------------------------------
WORK IN PROGRESS
// takes one variable, the integer to be converted to roman numerals
08 00 00
#### #### #### ####
STRING 00 00 00 00
#### #### #### ####
00 04 02 D2
#### #### #### ####
NEWOBJ 08 00 03 01
NEWVAR //Reference string. 2nd var (01)
PUSH 00
NEWVAR //Variable character counter for romnum into string. 3rd var (02)
RILOAD 00
IFEQ 00 06
GOTO 00 2E
PUSH 05 // returns 'NVLLA'
RILOAD 01 // Reference string
RSARR
PUSH 01
PUSH 00
PUSH 4E // N
ISTARR
PUSH 01
PUSH 01
PUSH 56 // V
ISTARR
PUSH 01
PUSH 02
PUSH 4C // L
ISTARR
PUSH 01
PUSH 03
PUSH 4C // L
ISTARR
PUSH 01
PUSH 04
PUSH 41 // A
ISTARR
RILOAD 01 // Reference string
RETURN

PUSH 1B //1B is a special character signifying the beginning of the string TODO
RILOAD 00

IFEQ 01 2B // Begin while loop 0 
RILOAD 00
WIDE PUSH 27 10
MOD
DUP // Stack: temp temp
WIDE PUSH 0F 9F // 3999

IFCLE 00 0B // Begin if conditional 0. Stack: ... temp
WIDE PUSH 03 E8
MOD // Stack ... temp % 1000
GOTO 00 0A // Else
DUP
RILOAD 00
SWAP
SUB // Stack ... temp (Var 00 - (n % 10000))
RISTORE 00 // End if conditional 0

RILOAD 00
WIDE PUSH 03 E8 // 1000
IDIV
RISTORE 00 // Stack: ... temp

DUP // Stack: ... 0x1B temp temp
WIDE PUSH 03 E8
IDIV
DUP // Stack: ... 0x1B temp (temp // 1000) (temp // 1000)

IFEQ 00 0E // Begin while loop 1 Stack: ... 0x1B temp (temp // 1000)
PUSH 4D // Stack: 1 ... 0x1B temp (temp // 1000) 0x4D
MSWAP 03 // Stack: 1 ... 0x1B 0x4D (temp // 1000) temp
SWAP // Stack: 1 ... 0x1B 0x4D temp (temp // 1000)
PUSH 01 // Stack: 1 ... 0x1B 0x4D temp (temp // 1000) 0x01
SUB // Stack: 1 ... 0x1B 0x4D temp ((temp // 1000)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... (M...M) temp
WIDE PUSH 03 E8 // 1000
MOD // Stack: ... (M...M) (temp % 1000)
DUP // Stack: ... (M...M) temp temp

WIDE PUSH 03 84 // 900 Stack: ... temp temp 900
IFCGE 00 06 // Stack: ... temp
GOTO 00 0E
PUSH 43
SWAP
PUSH 4D
SWAP
WIDE PUSH 03 84
SUB // Stack: ... 0x43 0x4D temp-900
DUP // Stack: ... temp temp

WIDE PUSH 01 F4 // 500
IFCGE 00 06
GOTO 00 0B
PUSH 44
SWAP
WIDE PUSH 01 F4
SUB
DUP // Stack: ... temp temp

WIDE PUSH 01 90 // 400
IFCGE 00 06
GOTO 00 0E
PUSH 43 // Stack: ... temp 0x43
SWAP
PUSH 44
SWAP
WIDE PUSH 01 90
SUB // Stack: ... 0x43 0x44 (temp-400)
DUP

PUSH 64 // 100
IDIV
DUP // Stack: ... temp (temp // 100) (temp // 100)
IFEQ 00 0E // Begin while loop 1 Stack: ... temp (temp // 100)
PUSH 43
MSWAP 03
SWAP // Stack: 1 ... 0x43 temp (temp // 100)
PUSH 01
SUB // Stack: 1 ... 0x43 temp ((temp // 100)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... temp
PUSH 64 // 100
MOD
DUP // Stack: ... temp temp

PUSH 5A // 90 
IFCGE 00 06
GOTO 00 0C
PUSH 58 // Stack: ... temp 0x58
SWAP
PUSH 43 // D
SWAP
PUSH 5A
SUB
DUP

PUSH 32 // 50
IFCGE 00 06
GOTO 00 09
PUSH 4C
SWAP
PUSH 32
SUB
DUP

PUSH 28 // 40
IFCGE 00 06
GOTO 00 0C
PUSH 58 // Stack: ... temp 0x58
SWAP
PUSH 4C // L
SWAP
PUSH 28
SUB
DUP

PUSH 0A // 10
IDIV
DUP
IFEQ 00 0E // Begin while loop 1 Stack: ... temp (temp // 10)
PUSH 58
MSWAP 03 // Stack: 1 ... 58 (temp // 10) temp
SWAP
PUSH 01
SUB // Stack: 1 ... 58 temp ((temp // 10)-1)
GOTO FF F4 // -12 End while loop 1

POP // Stack: ... temp
PUSH 0A // 10
MOD
DUP // Stack: ... temp temp

PUSH 09 // 9
IFCGE 00 06
GOTO 00 0C
PUSH 49 // Stack: ... temp I
SWAP
PUSH 58 // X
SWAP
PUSH 09
SUB
DUP

PUSH 05
IFCGE 00 06
GOTO 00 09
PUSH 56 // V
SWAP
PUSH 05
SUB
DUP

PUSH 04 //
IFCGE 00 06
GOTO 00 0C
PUSH 49 // Stack: ... temp I
SWAP
PUSH 56 // V
SWAP
PUSH 04
SUB
DUP // Stack: ... temp temp

IFEQ 00 0C // Begin while loop 1 Stack: ... temp
PUSH 49 // Stack: 1 ... temp 0x49
SWAP
PUSH 01
SUB // Stack: 1 ... 0x49 temp-1
GOTO FF F6 // -12 End while loop 1

POP
PUSH 7C
GOTO FE D6

POP
PUSH 02 // Initializes counter, Beginning of outloop, #0
DUP // Stack: (elems) counter counter
SFRONT // Stack: (elems) counter (SeqElem) SeqElem stands for sequenced elem
DUP
DUP
PUSH 1B //Checks for end of string
IFCEQ 00 35 // If end of string, go to #3

PUSH 7C // Stack: (elems) counter (SeqElem) (SeqElem) 7C
IFCEQ 00 0A // GOTO #1 IF TRUE

SWAP // Stack: (elems) (SeqElem) counter
PUSH 01
ADD // Stack: (elems) (seqElems) counter
GOTO FF EE

SWAP // #1 Stack: (elems) 7C counter
DUP // Stack: (elems) 7C counter counter
RILOAD 01
EXARR
SBACK

DUP //Begin if loop
PUSH 7C
IFCEQ 00 10
RILOAD 02
RILOAD 01 //Stack: (elems) Element Index Arref
MSWAP 03
ISTARR
INC 02 01
GOTO FF F0

RILOAD 02
RILOAD 01 //Stack: (elems) Element Index Arref
MSWAP 03
ISTARR
INC 02 01
GOTO FF C6

POP // #3
POP
PUSH 02
SUB
DUP
RILOAD 01
EXARR
DUP
IFEQ 00 15//begin if loop. Stack: (seqElems) counter. Goto #5

SWAP
RILOAD 02
RILOAD 01
MSWAP 03
ISTARR
INC 02 01
PUSH 01
SUB
DUP
GOTO FF EE

RILOAD 01
RETURN

